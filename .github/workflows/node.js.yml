# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: cache nextjs  
      uses: actions/cache@v2
      with:
        # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
    - run: |
        npm i
        touch .env
        echo PORT=${{ secrets.PORT }} >> .env
        echo APP_NAME=${{ secrets.APP_NAME }} >> .env
        echo NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }} >> .env
        echo MONGO_CONNECTSTRING=${{ secrets.MONGO_CONNECTSTRING }} >> .env
        echo MONGO_USER=${{ secrets.MONGO_USER }} >> .env
        echo MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} >> .env
        echo TOKEN_SECRET=${{ secrets.TOKEN_SECRET }} >> .env
        echo TOKEN_EXPIRESIN=${{ secrets.TOKEN_EXPIRESIN }} >> .env
        echo REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }} >> .env
        echo REFRESH_TOKEN_EXPIRESIN=${{ secrets.REFRESH_TOKEN_EXPIRESIN }} >> .env
        echo SALT_ROUNDS=${{ secrets.SALT_ROUNDS }} >> .env
        echo REDIS_SERVER=${{ secrets.REDIS_SERVER }} >> .env
        echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env
        echo SERVER_FILE_MANAGER=${{ secrets.SERVER_FILE_MANAGER }} >> .env
        npm run build
        npm run build:next
        pm2 stop ecosystem.config.js
        pm2 start ecosystem.config.js
        pm2 save
